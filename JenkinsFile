pipeline {
  agent any
    tools {
      maven 'Maven'
      jdk 'JDK11'
    }
	stages {
      stage('Build maven ') {
        steps {      
               bat 'mvn  clean install package'
              }
        }
	  stage('Static code analysis'){
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonarqube') {
                        bat 'mvn clean package sonar:sonar'
                    }
                   }
                }
            }
	 	  
      stage('Copy Artifact') {
        steps {         
		     bat 'copy C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\petcline-application\\target\\*.jar C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\petcline-application\\docker'
                    }
                 }
      /*stage('Build and Push Docker Image') {
      
        steps {
         script {
            	 def customImage = docker.build('kavyapallamreddy/petclinic-application', "./docker")
                 docker.withRegistry('https://registry.hub.docker.com', 'docker-cred') {
                 customImage.push("${env.BUILD_NUMBER}")
		         bat 'docker run -d -p 8010:8080 -t kavyapallamreddy/petclinic-application:2'
		           }
                }
            }
	    }*/
stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "kavyapallamreddy/petclinic-application:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            bat 'docker build -t ${DOCKER_IMAGE} ./docker'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://registry.hub.docker.com', "docker-cred") {
            dockerImage.push()
	    bat 'docker run -d -p 8010:8080 -t  ${DOCKER_IMAGE}'
            }
        }
      }
    }
          
    }
}
